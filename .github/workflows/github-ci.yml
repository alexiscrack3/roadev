name: GitHub CI

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: alexiscrack3/roadev:latest

jobs:
  unit-tests:
    runs-on: ubuntu-18.04
    name: unit tests
    env:
      POSTGRES_HOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: roadev_test
      POSTGRES_PORT: 5432
    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: roadev_test
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          # Not needed with a .ruby-version file
          ruby-version: 2.6.3
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true

      - name: Install dependencies
        run: |
          gem install bundler
          bundler install

      - name: Install webpack dependencies
        run: |
          bin/rails webpacker:install

      - name: Create database
        run: |
          RAILS_ENV=test bin/rails db:create
          RAILS_ENV=test bin/rails db:migrate

      - name: Run tests
        run: |
          bin/rails test:coverage

      - name: Upload coverage results
        uses: actions/upload-artifact@master
        if: always()
        with:
          name: coverage-report
          path: coverage

  linter:
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          # Not needed with a .ruby-version file
          ruby-version: 2.6.3
          # runs 'bundle install' and caches installed gems automatically
          bundler-cache: true

      - name: Install Rubocop
        run: gem install rubocop-github

      - name: Run linter
        run: rubocop

  build:
    runs-on: ubuntu-18.04
    needs: unit-tests
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          timeout: 5m
          script: |
              wget https://raw.githubusercontent.com/alexiscrack3/roadev/main/docker-compose.yml -O docker-compose.yml
              wget https://raw.githubusercontent.com/alexiscrack3/roadev/main/docker-compose.prod.yml -O docker-compose.prod.yml
              echo "=== DOCKER PS ==="
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker ps
              echo "=== DOCKER-COMPOSE DOWN ==="
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker-compose down
              echo "=== DOCKER PS ==="
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker ps
              echo "=== DOCKER PULL ==="
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker pull ${{ env.IMAGE_NAME }}
              echo "=== PRINTING DANGLING IMAGES ==="
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker images -qa --filter "dangling=true"
              echo "=== REMOVING DANGLING IMAGES ==="
              # echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker images -qa --filter "dangling=true" | xargs --no-run-if-empty sudo docker rmi
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker images prune -f
              echo "=== DOCKER-COMPOSE UP ==="
              echo ${{ secrets.SSH_PASSWORD }} | sudo -S -k docker-compose -f docker-compose.yml -f docker-compose.prod.yml --env-file .env up -d
